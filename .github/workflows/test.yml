name: Testes do PEMAD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit_tests:
    name: Testes UnitÃ¡rios
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm run test:ci
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  e2e_tests:
    name: Testes E2E (Playwright)
    runs-on: ubuntu-latest
    needs: unit_tests

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Run Playwright tests
      run: npx playwright test

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: playwright-report
        path: playwright-report/

  performance_tests:
    name: Testes de Performance (Lighthouse)
    needs: e2e_tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - run: npm ci
      - name: Install Chrome
        run: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          rm google-chrome-stable_current_amd64.deb
      - name: Build application
        run: npm run build
      - name: Start application
        run: npm start & npx wait-on http://localhost:3000
      - name: Run performance tests (Lighthouse via Playwright)
        run: npx playwright test performance.spec.ts
      - name: Upload Lighthouse report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report
          path: |
            lighthouse-report.html
            lighthouse-report.json
          retention-days: 30
      - name: Check performance regression (Requires Setup)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const THRESHOLDS = {
              performance: 0.8,
              accessibility: 0.9,
              'best-practices': 0.9,
              seo: 0.9,
              pwa: 0.95
            };
            
            const fs = require('fs');
            const reportPath = 'lighthouse-report.json';
            
            if (!fs.existsSync(reportPath)) {
              core.warning(`Lighthouse report not found at ${reportPath}. Skipping regression check.`);
              return;
            }
            
            try {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              if (!report.categories) {
                 core.warning(`Report format unexpected. Skipping regression check.`);
                 return;
              }
              
              const scores = {
                performance: report.categories.performance?.score,
                accessibility: report.categories.accessibility?.score,
                'best-practices': report.categories['best-practices']?.score,
                seo: report.categories.seo?.score,
                pwa: report.categories.pwa?.score
              };
              
              const issues = Object.entries(scores)
                .filter(([metric, score]) => score !== undefined && score !== null && THRESHOLDS[metric] !== undefined && score < THRESHOLDS[metric])
                .map(([metric, score]) => 
                  `${metric}: ${Math.round(score * 100)}% (threshold: ${Math.round(THRESHOLDS[metric] * 100)}%)`
                );
              
              if (issues.length > 0) {
                core.setFailed(`Performance regression detected:\n${issues.join('\n')}`);
              }
            } catch (error) {
              core.error(`Error processing Lighthouse report: ${error.message}`);
            } 